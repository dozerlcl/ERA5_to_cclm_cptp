#!/bin/bash
#
#################################################
# batch settings for INT2LM run on mistral at DKRZ
#################################################
#SBATCH --job-name=sp_int2lm
#SBATCH --partition=compute
#SBATCH --nodes=1
#SBATCH --ntasks=24
#SBATCH --time=00:05:00
#SBATCH --exclusive
#SBATCH --output=sp_int2lm.o%j
#SBATCH --error=sp_int2lm.o%j
#SBATCH --account=

# ulimit: the setting of the stack size instead of using "ulimit -s unlimited",
#         together with the --propagate=STACK in the "srun" command (see below),
#         speeds up the job considerably; in my test cases between 10% and 15%;
#         the value 102400 is the default maximum stack size on MISTRAL
#
# ulimit -s 102400

#
export FORT_BUFFERED=true
export decfort_dump_flag=true
#
export MXM_LOG_LEVEL=ERROR

set -e

#### !!!! Adjust this directory !!!!
CCLMDIR=/HGST_SATA_8T_3/yycheng/CCLM_starter_test/cclm-sp-v3.1.1 #编译出的CCKN位置
CASEDIR=/HGST_SATA_8T_3/yycheng/CCLM_starter_test/cptp_test/gcm_to_cclm_copy_for_cptp #处理此次CASE的文件夹
DATADIR=/HGST_SATA_8T_3/yycheng/data_stage/cptp/ # 所有运行数据的位置
# change to new work path
cd ${CASEDIR}/log_int2lm

# clean the directory
rm -rf I* O* Y*

NPX=4
NPY=6
NPIO=0
NP1=`expr $NPX \* $NPY`
NP=`expr $NP1 + $NPIO`

#################################################
# cat together the INPUT*-files
#################################################

cat > INPUT <<**
 &CONTRL
  ydate_ini='2008071400', hstart=0.0, hstop=9.0, hincbound=3,
  yinput_model='CM',
  itype_profiles_vert_interp = 1,   
  itype_aerosol = 2,
  itype_albedo=2,
  itype_calendar = 0,
  itype_rootdp = 4,
  itype_t_cl = 1, 
  itype_w_so_rel = 1,
  l_cressman = .FALSE., 
  lbdclim = .TRUE.,  
  lboundaries =.TRUE., 
  lfilter_oro=.FALSE.,
  lforest = .TRUE.,
  linitial=.TRUE.,
  lmulti_layer_in = .TRUE., 
  lmulti_layer_lm = .TRUE.,
  lprog_qi = .TRUE.,
  lreorder = .TRUE.,
  lsso = .TRUE.,
  ltime_mean = .TRUE., 
  luse_t_skin = .TRUE.,
  nincwait = 5, nmaxwait = 20, 
  nprocx = ${NPX}, nprocy = ${NPY},
/END
 &GRID_IN
  pcontrol_fi =30000., 
  ie_in_tot = 527, 
  je_in_tot = 261, 
  ke_in_tot = 108,
  startlat_in_tot =  -6.323183, 
  endlat_in_tot   =  66.74469, 
  startlon_in_tot =  43.03125,
  endlon_in_tot   = -169.0315,            ! 正确结束的经度 -169.0312
  pollat_in = 90.0, pollon_in = 180.0,                             ! 无旋转
  lushift_in=.FALSE.,.FALSE., lvshift_in=.FALSE.,.FALSE.,
  ke_soil_in = 3,                                                  ! n 个层次有n+1个czml soil in
  czml_soil_in = 0.035, 0.175, 0.64, 1.775,
 /END
 &LMGRID
  ivctype = 2,
  irefatm = 1,
  ielm_tot=531, jelm_tot=361, kelm_tot=40,
  pollat =  57, pollon = -91.5, 
  dlon=0.08200, dlat=0.08200, 
  startlon_tot  = -21.73000, startlat_tot  = -14.76000,
  !  ielm_tot=527, jelm_tot=357, kelm_tot=40,
  !  pollat =  57, pollon = -91.5, 
  !  dlon=0.08200, dlat=0.08200, 
  !  startlon_tot  = -21.566, startlat_tot  = -14.596,
  ke_soil_lm=9,   
  czml_soil_lm = 0.005,0.025,0.07,0.16,0.34,0.7,1.42,2.86,5.74,11.5,
 /END
 &DATABASE
 /
 &DATA
  yinput_type='analysis',
  ytunit_in='d',
  ytunit_out='d',
  ylmext_form_read='ncdf',
  yinext_form_read='ncdf',
  yin_form_read='ncdf',
  ylm_form_write='ncdf',
  ie_ext=531, je_ext=361,
  ylmext_lfn='cptp_08lager_domain2020092314159.nc',
  ylmext_cat='${DATADIR}/cptp_ext_test/',
  yinext_lfn='cas2008070100.nc',
  yinext_cat='${DATADIR}/ERA5/year2008/ERA5_EA_2008_07/', ! 用第一个时间的文件做yinext? for GME?
  yin_cat='${DATADIR}/ERA5/year2008/ERA5_EA_2008_07/',
  ylm_cat='${DATADIR}/cptp_out/int2lm',
  nprocess_ini = 131, nprocess_bd = 132, 
 /END
 &PRICTR
  igp_tot = 36,
  jgp_tot = 30,
  lchkin=.TRUE., lchkout=.TRUE.,
 /END
**


#################################################
# run the program
#################################################

# you have to adapt the way how to invoke the binary
echo ----- start INT2CLM
mpirun ${CCLMDIR}/src/int2lm/bin/int2lm.exe
# ${SPDIR}/src/int2lm/bin/int2lm.exe
# srun -l --propagate=STACK --cpu_bind=verbose,cores --distribution=block:cyclic  ${SPDIR}/src/int2lm/bin/int2lm.exe
echo ----- INT2CLM finished, cheer up.

